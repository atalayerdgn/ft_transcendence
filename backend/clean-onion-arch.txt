1. Clean Architecture
Clean Architecture (Temiz Mimari), uygulamanın farklı katmanlarını iş mantığından ve dış bağımlılıklardan ayırmayı amaçlar. Katmanlar genellikle aşağıdaki gibidir:

Entities (Varlıklar): İş mantığı ve iş kuralları. Django'daki models/ bu katmanı temsil eder.
Use Cases (Kullanım Senaryoları): İş kurallarını uygulayan servisler. Django'daki services/ bu katmanı temsil eder.
Interface Adapters (Arayüz Adaptörleri): Veritabanı işlemleri ve HTTP istekleri gibi dış etkileşimler. Django'daki repositories/ ve views/ bu katmanı temsil eder.
Frameworks & Drivers (Çerçeveler ve Sürücüler): Dış bağımlılıklar ve uygulama çerçeveleri. Django, bu katmanın bir parçasıdır.
2. Onion Architecture
Onion Architecture (Soğan Mimari) da benzer prensiplere dayanır ve uygulamanın iş mantığını merkezde tutarak dış katmanlardan bağımsız olmasını hedefler:

Core (Çekirdek): İş mantığı ve iş kuralları. Django'daki models/ ve services/ bu katmanı temsil eder.
Domain Services (Alan Servisleri): İş mantığını uygulayan servisler. services/ bu katmana denk gelir.
Application Services (Uygulama Servisleri): Uygulama ile ilgili işlemleri yöneten servisler. services/ burada da rol oynar.
Infrastructure (Altyapı): Veritabanı, dosya sistemleri ve diğer altyapı bileşenleri. repositories/ ve views/ bu katmanda yer alır.
Özetle:
Models (models/): İş mantığını temsil eder, veritabanı modelleri burada tanımlanır.
Repositories (repositories/): Veritabanı erişimi ve CRUD işlemleri için kullanılır.
Services (services/): İş mantığını yönetir ve iş kurallarını uygular.
Interfaces (interfaces/): Arayüzler ve soyutlamalar, dış katmanlarla etkileşimi tanımlar.
Views (views/): HTTP isteklerini işler ve kullanıcıya yanıt döndürür.

