services:
  postgres:
    image: postgres:16
    container_name: postgres_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      

  usermanagement:
    build: ./user_management/
    container_name: usermanagementc
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./user_management:/app
    working_dir: /app
    ports:
      - "8004:8000"
    environment:
      DATABASE_NAME: usermanagement_db
      DATABASE_USER: postgres
      DATABASE_PASSWORD: 1234
      DATABASE_HOST: postgres
    env_file:
      - ./user_management/.env


  game:
    build: ./game/
    container_name: game_service
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./game:/app
    working_dir: /app
    ports:
      - "8005:8001"
    environment:
      DATABASE_NAME: game_db
      DATABASE_USER: postgres
      DATABASE_PASSWORD: 1234
      DATABASE_HOST: postgres
    env_file:
      - ./game/.env

  friend_service:
    build: ./friend_service/
    container_name: friend_service
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./friend_service:/app
    working_dir: /app
    ports:
      - "8006:8002"
    environment:
      DATABASE_NAME: friend_service_db
      DATABASE_USER: postgres
      DATABASE_PASSWORD: 1234
      DATABASE_HOST: postgres
    env_file:
      - ./friend_service/.env

  nginx:
      build: ./frontendservice/
      container_name: nginx
      ports:
        - "8007:80"
      volumes:
        - ./frontendservice/frontend:/usr/share/nginx/html
      networks:
        - frontend_network


volumes:
  postgres_data:


networks:
  frontend_network:
    driver: bridge
